swagger: "2.0"
info:
  description: "Register for API Providers and Consumers"
  version: "1.0.0"
  title: "Register"
  contact:
    email: "rpopuc@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "register.local"
basePath: "/v1"
tags:
- name: "provider"
  description: "Everything about Providers"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /provider:
    post:
      tags:
        - "provider"
      summary: "Register a new provider"
      description: ""
      operationId: "registerProvider"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Provider object that needs to be registered"
          required: true
          schema:
            $ref: "#/definitions/Provider"
      responses:
        "405":
          description: "Invalid input"
      security:
        - register_auth:
          - "write:providers"
          - "read:providers"
    get:
      tags:
        - "provider"
      summary: "Get all registered providers"
      description: ""
      operationId: "listProviders"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Provider"
      security:
        - register_auth:
          - "write:providers"
          - "read:providers"
  /provider/{providerId}:
    get:
      tags:
        - "provider"
      summary: "Find Provider by ID"
      description: "Returns a single Provider"
      operationId: "getProviderById"
      produces:
        - "application/json"
      parameters:
        - name: "providerId"
          in: "path"
          description: "ID of provider to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Provider"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Provider not found"
      security:
        - api_key: []
    put:
      tags:
        - "provider"
      summary: "Updated Provider"
      description: ""
      operationId: "updateProvider"
      produces:
        - "application/json"
      parameters:
        - name: "providerId"
          in: "path"
          description: "ID of provider to return"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Provider object that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Provider"
      responses:
        "400":
          description: "Invalid Provider supplied"
        "404":
          description: "Provider not found"
    post:
      tags:
        - "provider"
      summary: "Updates a Provider with form data"
      description: ""
      operationId: "updateProviderByForm"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "providerId"
          in: "path"
          description: "ID of provider to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "405":
          description: "Invalid input"
      security:
      - register_auth:
        - "write:providers"
        - "read:providers"
    delete:
      tags:
        - "provider"
      summary: "Deletes a Provider"
      description: ""
      operationId: "deleteProvider"
      produces:
        - "application/json"
      parameters:
        - name: "providerId"
          in: "path"
          description: "ID of provider to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Pet not found"
      security:
      - register_auth:
        - "write:providers"
        - "read:providers"
  /provider/{providerId}/consumer:
    post:
      tags:
        - "provider"
        - "consumer"
      summary: "Register a Consumer to a existing Provider"
      description: ""
      operationId: "registerConsumer"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "providerId"
          in: "path"
          description: "ID of provider to return"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Consumer object that needs to be registered"
          required: true
          schema:
            $ref: "#/definitions/Consumer"
      responses:
        "201":
          description: "successful operation"
      security:
      - register_auth:
        - "write:consumers"
        - "read:consumers"
  /provider/{providerId}/consumer/{consumerId}:
    get:
      tags:
        - "consumer"
      summary: "Find a Consumer registered to a Provider"
      description: ""
      operationId: "getConsumerById"
      produces:
        - "application/json"
      parameters:
        - name: "providerId"
          in: "path"
          description: "ID of Provider that has the Consumer registered"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
        - name: "consumerId"
          in: "path"
          description: "ID of Consumer registered to Provider"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Consumer"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Provider or Consumer not found"
    delete:
      tags:
        - "consumer"
      summary: "Unregister Consumer from Provider"
      description: ""
      operationId: "unregisterConsumer"
      produces:
        - "application/json"
      parameters:
        - name: "providerId"
          in: "path"
          description: "ID of Provider that has the Consumer registered"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
        - name: "consumerId"
          in: "path"
          description: "ID of Consumer registered to Provider"
          required: true
          type: "integer"
          maximum: 10.0
          minimum: 1.0
          format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Provider not found"
  /user:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
        - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
        - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
securityDefinitions:
  register_auth:
    type: "oauth2"
    authorizationUrl: "http://register.local/oauth/dialog"
    flow: "implicit"
    scopes:
      write:providers: "modify Providers in your account"
      read:providers: "read your Providers"
      write:consumers: "modify Consumers in your account"
      read:consumers: "read your Consumers"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Provider:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      definition:
        type: "string"
      description:
        type: "string"
  Consumer:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      providerId:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      definition:
        type: "string"
      description:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"